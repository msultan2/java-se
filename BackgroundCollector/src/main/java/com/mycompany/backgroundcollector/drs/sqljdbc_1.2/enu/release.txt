Release Information
Microsoft SQL Server 2005 JDBC Driver 1.2
October 2007


INTRODUCTION
------------
This file contains late-breaking or other important information
that supplements the Microsoft SQL Server 2005 JDBC Driver
documentation. You should read this file completely before 
installing the JDBC driver.

Your feedback is very important to us and we will strive
to respond to your feedback in a timely manner. For information
about providing feedback by using the JDBC driver newsgroup and online
forums, see the Microsoft SQL Server 2005 JDBC Driver page at
http://msdn.microsoft.com/data/ref/jdbc.


INSTALLATION
------------
Instructions for installing the JDBC driver are located in install.txt.
Refer to that file for information about installing the JDBC
driver on Windows and Unix operating systems.


RELEASE CONTENTS
----------------
The Microsoft SQL Server 2005 JDBC Driver executable zip or tar file
unpacks the following files in the specified locations, relative
to the selected installation directory:

<installation directory>\sqljdbc_<version>\<language>\install.txt
<installation directory>\sqljdbc_<version>\<language>\release.txt
<installation directory>\sqljdbc_<version>\<language>\license.txt
<installation directory>\sqljdbc_<version>\<language>\sqljdbc.jar
<installation directory>\sqljdbc_<version>\<language>\auth\x86\sqljdbc_auth.dll
<installation directory>\sqljdbc_<version>\<language>\auth\x64\sqljdbc_auth.dll
<installation directory>\sqljdbc_<version>\<language>\auth\ia64\sqljdbc_auth.dll
<installation directory>\sqljdbc_<version>\<language>\help\default.htm
<installation directory>\sqljdbc_<version>\<language>\help\index.htm
<installation directory>\sqljdbc_<version>\<language>\help\toc.htm
<installation directory>\sqljdbc_<version>\<language>\help\html\<doc pages...>
<installation directory>\sqljdbc_<version>\<language>\help\local\<doc files...>
<installation directory>\sqljdbc_<version>\<language>\help\samples\<sample files...>
<installation directory>\sqljdbc_<version>\<language>\xa\xa_install.sql
<installation directory>\sqljdbc_<version>\<language>\xa\x86\sqljdbc_xa.dll
<installation directory>\sqljdbc_<version>\<language>\xa\x64\sqljdbc_xa.dll
<installation directory>\sqljdbc_<version>\<language>\xa\ia64\sqljdbc_xa.dll


CHANGE LIST
-----------
The following is a list of changes that have been made in the Microsoft SQL Server
2005 JDBC Driver since the version 1.1 release in September 2006.

35034 The getDate method now works on the IBM WebSphere Application Server 
      versions 5.1 and 6.0.

36085 The driver now correctly uses the GENERATED_KEYS for the column name in the 
      ResultSet returned by the SQLServerStatement.getGeneratedKey method.

37030 Setting the connection string property sendStringParametersAsUnicode=false
      no longer results in the Error 17805 (invalid buffer received from client)
      from SQL Server for some database collations.

37556 The driver now correctly handles setting character streams containing 
      Unicode data to non-Unicode database columns.

39311 The driver now provides a better performance on the SQLServerResultSet for 
      the queries that return char, varchar or text column data types with collations.

39941 The driver no longer closes the connection when the application inserts or 
      updates the java.io.Reader or java.io.InputStream objects with incorrectly 
      specified lengths.

43090 SQLServerStatement.getUpdateCount method now returns the correct update 
      count when the SQLServerStatement.setMaxRows is set.

45827 The SQLServerStatement.executeQuery method now throws an SQLException 
      if the specified argument, an SQL statement, returns a result other than 
      a single ResultSet.

46707 The driver now correctly supports calling the stored procedures by using 
      the named parameters.

49243 The driver now supports the default packetSize value for the IBM WebSphere 
      Application Server version 6.1.

50554 The driver no longer truncates an output string parameter from a stored 
      procedure to 4000 characters when the actual string length is larger than 4000.

55059 The driver now supports all Hindi, Divehi, Indic, Syriac, and AltDiction2 
      (alternate dictionary order) collations.

57032 The driver no longer logs exceptions due to the closing of an internal 
      prepared statement with a handle  -1. 

57853 The SQLServerConnection.setTypeMap method no longer causes an SQLException 
      when connecting by using XA data source through the IBM WebSphere 
      Application Server version 5.1.

60179 The client machine without a hostname no longer fails while connecting to 
      a SQL Server.

61202 The driver now correctly clears the SQLWarning message chain after 
      a statement execution.

92866 Calling the SQLServerStatement.setMaxRows method on a statement no longer 
      results in wrong row counts in the successive statements on the same connection.


KNOWN ISSUES
------------
The following are known issues with the Microsoft SQL Server 2005 JDBC Driver:


1) DRIVER LOAD CONFLICT WITH THE SQL SERVER 2000 JDBC DRIVER

If you load both the Microsoft SQL Server 2000 JDBC Driver and the
Microsoft SQL Server 2005 JDBC Driver in the same process, in some
cases the 2000 version of the JDBC driver will incorrectly accept a
DriverManager.getConnection method call that is targeted for the 
2005 version of the JDBC driver.

The problem is caused by the 2000 version of the JDBC driver
incorrectly accepting the "jdbc:sqlserver://" URL prefix if it is
loaded first.  

To work around this issue, load the 2005 version of the JDBC driver
class first, as follows:

Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver"); // 2005 version
Class.forName("com.microsoft.jdbc.sqlserver.SQLServerDriver"); // 2000 version

This will ensure that the "jdbc:sqlserver://" URL prefix is handled
by the 2005 version of the JDBC driver and the "jdbc:microsoft:sqlserver://"
URL prefix is handled by the 2000 version of the JDBC driver.


2) LIMITATIONS GETTING PARAMETER METADATA FOR PREPARED STATEMENTS

There are some limitations when using the SQLServerParameterMetaData 
class with prepared statements. SQL INSERT statements require the optional
INTO clause and SQL DELETE statements require the optional FROM clause to
get the parameter metadata correctly.


3) SQL SERVER 2000 DATA CONVERSION LIMITATIONS

When using SQL Server 2000 with the JDBC driver, the following data
conversion limitations apply:

	- String data cannot be converted to an underlying money or
	  smallmoney column.
	- String data longer than 4000 characters can be converted
	  to char or varchar underlying columns if the
	  sendStringParametersAsUnicode connection string property is set
	  to false.


4) LIMITATIONS WITH NAMED PARAMETERS

Named parameters are not supported with stored procedures that contain
a left bracket "[" in their name. For example, a name like "stor[edProc".
Note that this does not affect the usual escaping of the stored procedure
names by using "[]".


5) XA TRANSACTION FAILURE ON WINDOWS XP

XA transactions will not work if SQL Server is running on Windows XP unless 
the following hotfix is applied:

"Performance Slows When You Use XA Transactions with SQL Server"
http://support.microsoft.com/kb/318818

Note this issue only applies when the SQL Server that is participating
in the XA transaction is running on Windows XP. Client applications 
running on Windows XP connecting to a remote SQL Server that is not 
running on Windows XP can participate in XA transactions. This issue
does not apply to Windows 2000 and Windows Server 2003.


6) SUN SOLARIS NEEDS GZIP TO INSTALL THE JDBC DRIVER

If installing the JDBC driver on a Sun Solaris computer, you may need to
first install GZIP in order to unzip the driver files. GZIP can be downloaded 
from www.gzip.org.


7) CONNECTION TIMEOUTS USING DATABASE MIRRORING

When you use the JDBC driver in a database mirroring configuration, the 
default connection timeout value is 0, which may result in indefinite 
connection attempts. Therefore, when you try to connect to a principal 
and mirror database that are both initially down, the JDBC driver will 
oscillate between each of the servers indefinitely until one gets back 
online. To escape from these infinite connection attempts, specify a 
finite value for the loginTimeout connection string property or incorporate
timeout logic into your application.


8) CONVERSION OF BIGDECIMAL VALUES

When you convert BigDecimal values to a string representation, the conversion
of those values depends on which version of the JVM that you are using. 

For example, the following code demonstrates these differences:

String str = new BigDecimal("1E10").toString();
System.out.println("String is " + str);
//with JVM 1.4 : prints out "String is 10000000000"
//with JVM 1.5 : prints out "String is 1E+10"

To achieve consistent behavior when it uses BigDecimal values, your application 
should use the BigDecimal.toPlainString method when running against JVM 1.5.


9) JDBC IPV6 CONNECTION BEHAVES INCONSISTENTLY WHEN USING INTEGRATED SECURITY

When using a numeric IPV6 address with integrated security, the connection 
may take longer to open or even fail. Integrated security connections to an 
IPV6 server will work as long as you use the machine name.


10) LARGE LIMIT VALUE FOR Reader.mark(readAheadLimit) IN ADAPTIVE MODE

In adaptive mode, if the application uses the java.io.Reader.mark(readAheadLimit) 
method to mark the position in a stream returned by the getter methods, 
an OutOfMemoryError might be thrown. This error may occur when the readAheadLimit 
is very large, such as Integer.MAX_VALUE. 

To work around this issue, set the readAheadLimit to a smaller value.


11) DATA TYPE CONVERSION FAILURE IN ADAPTIVE MODE

In adaptive mode, using getCharacterStream or getAsciiStream methods to retrieve 
character-valued ResultSet columns or CallableStatement OUT parameters might throw 
an OutOfMemoryError. This error occurs when a data type conversion is necessary for 
the value. For example, retrieving an ntext column data type by using the 
getAsciiStream method or a varchar(max) column data type by using the 
getCharacterStream method requires a data type conversion.

To work around this issue, use the appropriate stream-getter method for that data type.

12) AVOID CREATING TEMPORARY TABLES via PreparedStatement or CallableStatement CLASSES

If the application creates temporary tables via PreparedStatement or CallableStatement 
when executing a query, these temporary tables may be dropped after the query executes.

To work around this issue, either execute such queries by using the Statement class or; 
if you must use the PreparedStatement class or the CallableStatement class, 
create a table in the database and delete that table when it is no longer needed.
